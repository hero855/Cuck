---
interface Props {
    className?: string
    layer: string
}

const { className, layer } = Astro.props as Props
---

<canvas class={`absolute inset-0 w-full h-full ${className}`} id={`wave-${layer}`}></canvas>

<script define:vars={{ layer }}>
    const lerp = (a, b, t) => a + (b - a) * t

    const initShader = async () => {
        localStorage.setItem(`waveDistortion-${layer}`, 1)
        localStorage.setItem(`waveScale-${layer}`, 0.03)
        localStorage.setItem(`waveCircleLimit-${layer}`, 3)
        localStorage.setItem(`waveFogOfWar-${layer}`, 0.7)
        localStorage.setItem(`waveVAnimSpeed-${layer}`, 0.0005)
        localStorage.setItem(`waveHAnimSpeed-${layer}`, 0.001)
        localStorage.setItem(`waveInterference-${layer}`, 0.0)
        localStorage.setItem(`waveCutX-${layer}`, 7)
        localStorage.setItem(`waveCutY-${layer}`, 10)
        localStorage.setItem(`waveTop-${layer}`, 1)
        localStorage.setItem(`waveLeft-${layer}`, 1)

        const canvas = document.getElementsByTagName('canvas').item(0)

        if (!canvas) throw new Error('Canvas not found')
        if (!canvas.parentElement) throw new Error('Parent element of canvas not found')

        const gl = canvas.getContext('webgl')
        if (!gl) throw new Error('WebGL not supported')

        // Fetch shader source
        const response = await fetch(`/shaders/waves2-${layer}.frag`)
        if (!response.ok) throw new Error(`Failed to load shader: ${response.statusText}`)
        const fragmentShaderSource = await response.text()

        // Vertex shader source
        const vertexShaderSource = `
            attribute vec2 position;
            void main() {
                gl_Position = vec4(position, 0.0, 1.0);
            }
        `

        // Create and compile shaders
        const vertexShader = gl.createShader(gl.VERTEX_SHADER)
        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)
        if (!vertexShader || !fragmentShader) throw new Error('Failed to create shaders')

        gl.shaderSource(vertexShader, vertexShaderSource)
        gl.shaderSource(fragmentShader, fragmentShaderSource)

        gl.compileShader(vertexShader)
        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
            throw new Error(`Vertex shader compile error: ${gl.getShaderInfoLog(vertexShader)}`)
        }

        gl.compileShader(fragmentShader)
        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
            throw new Error(`Fragment shader compile error: ${gl.getShaderInfoLog(fragmentShader)}`)
        }

        // Create and link program
        const program = gl.createProgram()
        if (!program) throw new Error('Failed to create program')

        gl.attachShader(program, vertexShader)
        gl.attachShader(program, fragmentShader)
        gl.linkProgram(program)

        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            throw new Error(`Program link error: ${gl.getProgramInfoLog(program)}`)
        }

        gl.useProgram(program)

        // Set up rectangle
        const buffer = gl.createBuffer()
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]), gl.STATIC_DRAW)

        // Set up attributes and uniforms
        const positionLocation = gl.getAttribLocation(program, 'position')
        gl.enableVertexAttribArray(positionLocation)
        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0)

        const tag = layer === 'front' ? 'f' : 'b'

        const resolutionLocation = gl.getUniformLocation(program, `u${tag}_resolution`)
        const timeLocation = gl.getUniformLocation(program, `u${tag}_time`)

        const offsetXLocation = gl.getUniformLocation(program, `u${tag}_offset_x`)
        const offsetYLocation = gl.getUniformLocation(program, `u${tag}_offset_y`)
        const distortionLocation = gl.getUniformLocation(program, `u${tag}_distortion_iterations`)
        const scaleLocation = gl.getUniformLocation(program, `u${tag}_scale`)
        const circleLimitLocation = gl.getUniformLocation(program, `u${tag}_circle_limit`)
        const fogLocation = gl.getUniformLocation(program, `u${tag}_fog_of_war`)
        const verticalSpeedLocation = gl.getUniformLocation(program, `u${tag}_vertical_animation_speed`)
        const horizontalSpeedLocation = gl.getUniformLocation(program, `u${tag}_horizontal_animation_speed`)
        const interferenceLocation = gl.getUniformLocation(program, `u${tag}_interference`)
        const fadingLocation = gl.getUniformLocation(program, `u${tag}_fading`)

        const cutXLocation = layer === 'front' ? gl.getUniformLocation(program, `u${tag}_cut_x`) : null
        const cutYLocation = layer === 'front' ? gl.getUniformLocation(program, `u${tag}_cut_y`) : null
        const topLocation = layer === 'front' ? gl.getUniformLocation(program, `u${tag}_top`) : null
        const leftLocation = layer === 'front' ? gl.getUniformLocation(program, `u${tag}_left`) : null

        const startTime = performance.timeOrigin

        // Enable blending
        gl.enable(gl.BLEND)
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)

        let offsetX = 0
        let offsetY = 0
        let staleX = 0
        let staleY = 0

        const render = () => {
            if (!canvas) throw new Error('Canvas is undefined')
            if (!canvas.parentElement) throw new Error('Parent element of canvas is undefined')
            const rect = canvas.parentElement.getBoundingClientRect()

            // Set canvas size to parent size
            canvas.width = rect.width
            canvas.height = rect.height

            // Set viewport to canvas size
            gl.viewport(0, 0, rect.width, rect.height)
            gl.uniform2f(resolutionLocation, rect.width, rect.height)
            gl.uniform1f(timeLocation, Date.now() - startTime)

            gl.uniform1f(offsetXLocation, lerp(staleX, offsetX, 0.01) * 10)
            gl.uniform1f(offsetYLocation, -1 * lerp(staleY, offsetY, 0.01) * 10)
            gl.uniform1i(distortionLocation, localStorage.getItem(`waveDistortion-${layer}`))
            gl.uniform1f(scaleLocation, localStorage.getItem(`waveScale-${layer}`))
            gl.uniform1f(circleLimitLocation, localStorage.getItem(`waveCircleLimit-${layer}`))
            gl.uniform1f(fogLocation, localStorage.getItem(`waveFogOfWar-${layer}`))
            gl.uniform1f(verticalSpeedLocation, localStorage.getItem(`waveVAnimSpeed-${layer}`))
            gl.uniform1f(horizontalSpeedLocation, localStorage.getItem(`waveHAnimSpeed-${layer}`))
            gl.uniform1f(interferenceLocation, localStorage.getItem(`waveInterference-${layer}`))
            gl.uniform1f(fadingLocation, localStorage.getItem(`waveFading-${layer}`))

            if (layer === 'front') {
                gl.uniform1f(cutXLocation, localStorage.getItem(`waveCutX-${layer}`))
                gl.uniform1f(cutYLocation, localStorage.getItem(`waveCutY-${layer}`))
                gl.uniform1i(topLocation, localStorage.getItem(`waveTop-${layer}`))
                gl.uniform1i(leftLocation, localStorage.getItem(`waveLeft-${layer}`))
            }

            // Draw
            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)
            requestAnimationFrame(render)

            staleX = lerp(staleX, offsetX, 0.01)
            staleY = lerp(staleY, offsetY, 0.01)
        }

        // Initial render
        render()

        // Re-render on resize
        const resizeObserver = new ResizeObserver(() => {
            requestAnimationFrame(render)
        })

        resizeObserver.observe(canvas.parentElement)

        window.addEventListener('mousemove', event => {
            offsetX = event.clientX - window.innerWidth / 2
            offsetY = event.clientY - window.innerHeight / 2
        })

        // Cleanup
        return () => {
            resizeObserver.disconnect()
            gl.deleteProgram(program)
            gl.deleteShader(vertexShader)
            gl.deleteShader(fragmentShader)
            gl.deleteBuffer(buffer)
        }
    }

    initShader()
        .then(cleanup => {
            window.addEventListener('visibilitychange', cleanup)
        })
        .catch(err => {
            console.error('Shader initialization failed:', err)
        })
</script>
