<canvas width="500" height="500"></canvas>

<script
    id="vertexshader"
    type="x-shader/x-vertex"
    src="/shaders/shader_vert.glsl"></script>
<script
    id="fragmentshader"
    type="x-shader/x-fragment"
    src="/shaders/shader_frag.glsl"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Получаем контекст WebGL
        const canvas = document.getElementsByTagName('canvas').item(0)
        if (!canvas) return
        const gl = canvas.getContext('webgl')
        if (!gl) return

        // Функция для проверки ошибок компиляции шейдера
        function checkShaderCompileStatus(shader: WebGLShader) {
            if (!gl) return
            const compileStatus = gl.getShaderParameter(
                shader,
                gl.COMPILE_STATUS,
            )
            if (!compileStatus) {
                const log = gl.getShaderInfoLog(shader)
                console.error(`Error compiling shader: ${log}`)
                gl.deleteShader(shader)
                return false
            }
            return true
        }

        // Функция для проверки ошибок связывания программы шейдера
        function checkProgramLinkStatus(program: WebGLProgram) {
            if (!gl) return
            const linkStatus = gl.getProgramParameter(program, gl.LINK_STATUS)
            if (!linkStatus) {
                const log = gl.getProgramInfoLog(program)
                console.error(`Error linking program: ${log}`)
                gl.deleteProgram(program)
                return false
            }
            return true
        }

        // Создаем программу шейдера
        const program = gl.createProgram()
        if (!program) return

        // Скомпилировать и присоединить вершинный шейдер
        const vertexShaderSource = `
        varying vec2 vUv; 
void main()
{
    vUv = uv;

    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0 );
    gl_Position = projectionMatrix * mvPosition;
}

        `
        const vertexShader = gl.createShader(gl.VERTEX_SHADER)
        if (!vertexShader) return
        gl.shaderSource(vertexShader, vertexShaderSource)
        gl.compileShader(vertexShader)
        if (!checkShaderCompileStatus(vertexShader)) {
            return
        }
        gl.attachShader(program, vertexShader)

        // Скомпилировать и присоединить фрагментный шейдер
        const fragmentShaderSource = `
        uniform float iGlobalTime;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

varying vec2 vUv;

        void main(void)
{
    vec2 p = gl_FragCoord.xy / iResolution.xy;
    vec2 q = p - vec2(0.5, 0.5);

    q.x += sin(iGlobalTime* 0.6) * 0.2;
    q.y += cos(iGlobalTime* 0.4) * 0.3;

    float len = length(q);

    float a = atan(q.y, q.x) + iGlobalTime * 0.3;
    float b = atan(q.y, q.x) + iGlobalTime * 0.3;
    float r1 = 0.3 / len + iGlobalTime * 0.5;
    float r2 = 0.2 / len + iGlobalTime * 0.5;

    float m = (1.0 + sin(iGlobalTime * 0.5)) / 2.0;
    vec4 tex1 = texture2D(iChannel0, vec2(a + 0.1 / len, r1 ));
    vec4 tex2 = texture2D(iChannel1, vec2(b + 0.1 / len, r2 ));
    vec3 col = vec3(mix(tex1, tex2, m));
    gl_FragColor = vec4(col * len * 1.5, 1.0);
}
        `
        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)
        if (!fragmentShader) return
        gl.shaderSource(fragmentShader, fragmentShaderSource)
        gl.compileShader(fragmentShader)
        if (!checkShaderCompileStatus(fragmentShader)) {
            return
        }
        gl.attachShader(program, fragmentShader)

        // Связываем атрибуты и униформы
        gl.linkProgram(program)
        if (!checkProgramLinkStatus(program)) {
            return
        }
        gl.useProgram(program)
        const positionAttributeLocation = gl.getAttribLocation(
            program,
            'aVertexPosition',
        )
        const positionBuffer = gl.createBuffer()
        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)
        gl.enableVertexAttribArray(positionAttributeLocation)
        gl.vertexAttribPointer(
            positionAttributeLocation,
            2,
            gl.FLOAT,
            false,
            0,
            0,
        )

        // Загружаем вершины треугольника
        const positions = [-0.5, -0.5, 0.5, -0.5, 0.0, 0.5]
        gl.bufferData(
            gl.ARRAY_BUFFER,
            new Float32Array(positions),
            gl.STATIC_DRAW,
        )

        // Рисуем треугольник
        gl.drawArrays(gl.TRIANGLES, 0, 3)
    })
</script>

<style>
    html {
        background-color: #000;
    }
</style>
